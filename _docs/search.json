[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "jupyter-finance",
    "section": "",
    "text": "This product is in a pre-release stage.",
    "crumbs": [
      "jupyter-finance"
    ]
  },
  {
    "objectID": "index.html#risks",
    "href": "index.html#risks",
    "title": "jupyter-finance",
    "section": "",
    "text": "This product is in a pre-release stage.",
    "crumbs": [
      "jupyter-finance"
    ]
  },
  {
    "objectID": "index.html#developer-guide",
    "href": "index.html#developer-guide",
    "title": "jupyter-finance",
    "section": "Developer Guide",
    "text": "Developer Guide\nIf you are new to using nbdev here are some useful pointers to get you started.\n\nSetup environmental variables\nSet up all your variables in .env.example first\n$ cp .env.example .env\n\n\nInstall jupyter_finance in Development mode\n# make sure jupyter_finance package is installed in development mode\n$ pip install -e .\n\n# make changes under nbs/ directory\n# ...\n\n# compile to have changes apply to jupyter_finance\n$ nbdev_prepare\n\n\nBuilding jupyter_finance in Development mode\n$ ./build-dist.sh\n# ensure prior instances of docker volumes are removed\n$ docker-compose up --build",
    "crumbs": [
      "jupyter-finance"
    ]
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "jupyter-finance",
    "section": "Usage",
    "text": "Usage\n\nInstallation\n\n\nDocumentation\nDocumentation can be found hosted on this GitHub repository’s API pages.",
    "crumbs": [
      "jupyter-finance"
    ]
  },
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "core",
    "section": "",
    "text": "These are backend functions to help login, query, and store Plaid API data",
    "crumbs": [
      "core"
    ]
  },
  {
    "objectID": "core.html#api-calls",
    "href": "core.html#api-calls",
    "title": "core",
    "section": "API Calls",
    "text": "API Calls\n\nsource\n\nget_account_transactions\n\n get_account_transactions (access_token:str, start_date:str, end_date:str)\n\nRetrieves all transactions for an account from the Plaid API.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\naccess_token\nstr\nThe Plaid access token for the user account\n\n\nstart_date\nstr\nThe starting date for transactions (YYYY-MM-DD)\n\n\nend_date\nstr\nThe ending date for transactions (YYYY-MM-DD)\n\n\nReturns\nList\nReturns List objects containing Dictionary objects related to account transactions\n\n\n\n\nsource\n\n\nget_account\n\n get_account (access_token:str)\n\nRetrieves account details from the Plaid API.\n\n\n\n\nType\nDetails\n\n\n\n\naccess_token\nstr\nThe Plaid access token for the user account\n\n\nReturns\nDict\nReturns Dictionary object of accounts\n\n\n\n\nsource\n\n\nplaid_post\n\n plaid_post (endpoint:str, payload:Dict[str,Any])\n\nMakes a POST request to the Plaid API.\n\n\n\n\nType\nDetails\n\n\n\n\nendpoint\nstr\nThe specific Plaid API endpoint (e.g., “accounts/get”), refer to Plaid API Docs\n\n\npayload\nDict\nThe JSON payload to be sent with the request\n\n\nReturns\nDict\nReturns JSON response from Plaid API",
    "crumbs": [
      "core"
    ]
  },
  {
    "objectID": "core.html#dataframe-transformation",
    "href": "core.html#dataframe-transformation",
    "title": "core",
    "section": "Dataframe Transformation",
    "text": "Dataframe Transformation\n\nsource\n\nget_transactions_df\n\n get_transactions_df (access_tokens:List[Tuple[str]], start_date:str=None,\n                      end_date:str=None)\n\nRetrieves and converts transaction data for multiple access tokens into a pandas DataFrame.\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\naccess_tokens\nList\n\nList object containing access tokens\n\n\nstart_date\nstr\nNone\nOptional start date (YYYY-MM-DD)\n\n\nend_date\nstr\nNone\nOptional end date (YYYY-MM-DD)\n\n\nReturns\nDataFrame\n\n\n\n\n\n\nsource\n\n\nget_accounts_df\n\n get_accounts_df (access_tokens:List[Tuple[str]])\n\nRetrieves and merges account information for multiple access tokens into a single pandas DataFrame.\n\n\n\n\nType\nDetails\n\n\n\n\naccess_tokens\nList\nList object containing access tokens\n\n\nReturns\nDataFrame\nReturns Dataframe of accounts\n\n\n\n\nsource\n\n\nget_account_df\n\n get_account_df (accounts_response:dict)\n\nConverts account information from the Plaid API response into a pandas DataFrame.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\naccounts_response\ndict\nDictionary object containing accounts\n\n\nReturns\nDataFrame\nReturns Dataframe of individual account",
    "crumbs": [
      "core"
    ]
  },
  {
    "objectID": "core.html#database-operations",
    "href": "core.html#database-operations",
    "title": "core",
    "section": "Database Operations",
    "text": "Database Operations\n\nsource\n\nupdate_last_refresh\n\n update_last_refresh (success=True, msg='Refresh was successful')\n\nUpdate database to log refresh time and status\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nsuccess\nbool\nTrue\nAssumes that refresh was successful\n\n\nmsg\nstr\nRefresh was successful\nRefresh message\n\n\nReturns\nNone\n\n\n\n\n\n\nsource\n\n\nget_last_successful_refresh\n\n get_last_successful_refresh ()\n\nQuery database to check when the last successful refresh was\n\nsource\n\n\nupsert_account_balances_df\n\n upsert_account_balances_df (accounts_df:pandas.core.frame.DataFrame)\n\nInserts or updates account balance history in the database.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\naccounts_df\nDataFrame\nA DataFrame containing account balance data\n\n\nReturns\nNone\n\n\n\n\n\nsource\n\n\ninsert_transactions_df\n\n insert_transactions_df (transactions_df:pandas.core.frame.DataFrame)\n\nInserts transaction data into the database.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ntransactions_df\nDataFrame\nA DataFrame containing transaction data\n\n\nReturns\nNone\n\n\n\n\n\nsource\n\n\ninsert_account_df\n\n insert_account_df (access_token:str, accounts_response:dict, email:str,\n                    phone:str)\n\nInserts account information and the associated access token into the database.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\naccess_token\nstr\nThe Plaid access token for the account\n\n\naccounts_response\ndict\nThe response from the Plaid API containing account information\n\n\nemail\nstr\nThe user email\n\n\nphone\nstr\nThe phone number associated with user\n\n\nReturns\nNone\n\n\n\n\n\nsource\n\n\nget_stored_public_access_tokens\n\n get_stored_public_access_tokens ()\n\nRetrieves distinct Plaid access tokens from the local database.\n\nsource\n\n\ndb_sql\n\n db_sql (query:str)\n\nExecutes a defined SQL query and returns the result as a pandas DataFrame.\n\n\n\n\nType\nDetails\n\n\n\n\nquery\nstr\nThe string representation of SQL query to execute\n\n\nReturns\nDataFrame\nDataframe of executed SQL query\n\n\n\n\nsource\n\n\ndb_conn\n\n db_conn ()\n\nCreates and returns a connection to the PostgreSQL database.",
    "crumbs": [
      "core"
    ]
  },
  {
    "objectID": "core.html#authentication",
    "href": "core.html#authentication",
    "title": "core",
    "section": "Authentication",
    "text": "Authentication\n\nsource\n\nget_and_save_public_token\n\n get_and_save_public_token (link_token:str, email:str, phone:str)\n\nRetrieves a public token using the link token, exchanges it for an access token, and saves the account information to the database.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nlink_token\nstr\nThe link token generated during the Plaid Link flow\n\n\nemail\nstr\nThe user’s email address\n\n\nphone\nstr\nThe user’s phone number\n\n\nReturns\nNone\n\n\n\n\n\nsource\n\n\ngenerate_link_token\n\n generate_link_token (email:str, phone:str)\n\nGenerates a link token to authenticate with the Plaid API.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nemail\nstr\nThe user’s email address\n\n\nphone\nstr\nThe user’s phone number\n\n\nReturns\nOptional\nReturns the generated link token if successful, otherwise None",
    "crumbs": [
      "core"
    ]
  },
  {
    "objectID": "core.html#tasks",
    "href": "core.html#tasks",
    "title": "core",
    "section": "Tasks",
    "text": "Tasks\n\nsource\n\nget_and_save_balance_history\n\n get_and_save_balance_history ()\n\n*Retrieves account balance history for stored public access tokens and updates the balance history in the database.\nSteps:\n\nFetch public access tokens from the database.\nRetrieve account details for each account associated with the tokens.\nUpdate the account balance history in the database.\n\nReturns: None*\n\nsource\n\n\nget_and_save_all_account_transactions\n\n get_and_save_all_account_transactions (first_time=False)\n\n*Retrieves all account transactions for stored public access tokens and inserts the transactions into the database.\nSteps:\n\nFetch public access tokens from the database.\nRetrieve transactions data for each account associated with the tokens. (2 cases, First time load or Incremental)\nInsert the retrieved transactions into the database.\n\nReturns: None*\n\nsource\n\n\nabout\n\n about ()\n\nPrint environmental details for this instance of jupyter-finance",
    "crumbs": [
      "core"
    ]
  },
  {
    "objectID": "first_time.html",
    "href": "first_time.html",
    "title": "00_First_Time",
    "section": "",
    "text": "Overview\n\nVerify with Plaid (and bank providers) via Link provided (get a link_token)\nGrab ‘Public Access Token’ and save to local database (to be used for next time)\nRetrieve every public access token in our database and query transaction data\n\nRefer to reading material Plaid Authentication\n\nemail = os.getenv(\"USER_EMAIL\", \"default@email.com\")\nphone = os.getenv(\"USER_PHONE\", \"+1 000 0000000\")\n\n\n\nVerify identity of Client Application and get a Link token\n\nlink_token = generate_link_token(email, phone)\n\n\n\nWe grab ‘Public Access Token’ and save to local database\n\nget_and_save_public_token(link_token, email, phone)\n\n\n\nRetrieve every public access token in our database\n\naccess_tokens = get_stored_public_access_tokens()\nget_and_save_all_account_transactions(first_time=True)",
    "crumbs": [
      "00_First_Time"
    ]
  },
  {
    "objectID": "refresh.html",
    "href": "refresh.html",
    "title": "01_Refresh",
    "section": "",
    "text": "Refresh data in database\n\nGet all transactions (from the last time this script was run)\nUpdate account balance history\n\n\nget_and_save_all_account_transactions()\nget_and_save_balance_history()",
    "crumbs": [
      "01_Refresh"
    ]
  }
]